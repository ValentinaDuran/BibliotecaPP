
@page "/editarprestatario"
@inject IDialogService DialogService
@inject ISnackbar SnackbarService
@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Services
@using System.Text.RegularExpressions
@inject IHttpService http
@inject NavigationManager NavManager

<MudDialog iOpen="isOpen">
    <DialogContent>
        <MudForm>
            <MudGrid>
 
<MudTextField  @bind-Value="@PrestatarioSeleccionado.NombreApellido" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.TwoTone.AccessTime"  Label="Prestatario"  />      
    
</MudGrid>
</MudForm>
</DialogContent>
 <DialogActions>
        
        <MudButton Color="Color.Primary" OnClick="GuardarCambios">Cambiar</MudButton>
    </DialogActions>
</MudDialog>


@code {
     
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int PrestatarioSeleccionadoId { get; set; }
    private List<Prestatario> prestatarios;
    private bool isOpen = false;
    private Prestatario PrestatarioSeleccionado = new Prestatario();
    protected override async Task OnInitializedAsync()
    {

        await ObtenerPrestarioPorId(PrestatarioSeleccionadoId);

    }

  
   
     private async void GuardarCambios()
    {
        
        var regex = new Regex(@"^[A-Za-z0-9 ñÑ]+$"); // Puedes ajustar la expresión regular según tus necesidades

if (!regex.IsMatch(PrestatarioSeleccionado.NombreApellido))
{
    SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
    SnackbarService.Add("El nombre y apellido no deben contener caracteres especiales", Severity.Error);
    return;
}
   

        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("pretatario editado", Severity.Success);
       var respuesta = await http.Put($"api/PrestatariosController/{PrestatarioSeleccionadoId}", PrestatarioSeleccionado);
       await Task.Delay(1700);
       if (!respuesta.Error)
        {
            MudDialog.Close();
            NavManager.NavigateTo("/prestatario-list", forceLoad: true);
        }
        else
        {
            var body = respuesta.HttpResponseMessage;
        }
    }

           private async Task ObtenerPrestarioPorId(int prestatarioId)
{
    var respuesta = await http.Get<Prestatario>($"api/PrestatariosController/{prestatarioId}");
    if (respuesta.Error)
    {
       
    }
    else
    {
        PrestatarioSeleccionado = respuesta.Respuesta;
         
        
    }
}
   
    
}
