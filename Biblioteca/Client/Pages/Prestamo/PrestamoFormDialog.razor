
@page "/tupaginadestino"

@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Services
@inject IHttpService http
@inject NavigationManager NavManager

<MudDialog iOpen="isOpen">
    <DialogContent>
        <MudForm>
            <MudGrid>

    <MudItem xs="12">
<MudSelect T="int" @bind-Value="newPrestamo.PrestatarioId" For="@(() => newPrestamo.PrestatarioId)">
                        @foreach (var prestatario in prestatarios)
                        {
                            <MudSelectItem Value="@prestatario.PrestatarioId">@prestatario.NombreApellido</MudSelectItem>
                        }
                    </MudSelect>    
                </MudItem>
    <MudItem xs="12"> 
<MudSelect @bind-Value="newPrestamo.InventarioId" Label="Seleccionar Inventario" Placeholder="Seleccione un Inventario">
    @if (inventarios != null)
    {
        @foreach (var inventario in inventarios)
        {
            <MudSelectItem Value="@inventario.InventarioId">
                @MostrarInventario(inventario)
            </MudSelectItem>
        }
    }
</MudSelect>

        </MudItem>

                <MudItem xs="12">
           

   <MudSelect @bind-Value="newPrestamo.CursoId"  Label="Seleccione un Curso">
    @if (cursos != null)
    {
        @foreach (var curso in cursos)
        {
            <MudSelectItem Value="@curso.CursoId">
                @MostrarCurso(curso)
            </MudSelectItem>
        }
    }
</MudSelect>

        </MudItem>
        <MudItem xs="4" >      
            <MudTextField T="DateTime" @bind-Value="@newPrestamo.FechaEntrega" Label="Fecha de entrega" ErrorText="Formato incorrecto">Elegir fecha de entrega</MudTextField>
           </MudItem>
        <MudItem xs="4" >      
            <MudTextField T="TimeSpan" @bind-Value="@newPrestamo.HoraEntrega" Format="hh\:mm" Label="Hora de entrega">Elegir hora de entrega</MudTextField>
           </MudItem>
        <MudItem xs="4" >      
            <MudTextField T="DateTime" @bind-Value="@newPrestamo.FechaDevolucion" Label="Fecha devolucion" >Elegir fecha de devolucion</MudTextField>
           </MudItem>
        <MudItem xs="4" >      
            <MudTextField T="TimeSpan" @bind-Value="@newPrestamo.HoraDevolucion" Format="hh\:mm" Placeholder="hh/mm">Elegir hora de devolucion</MudTextField>
           </MudItem>
        <MudItem xs= "4">
        <MudTextField py-8  Label="Observacion" @bind-Value="newPrestamo.Observacion" />
        </MudItem>



</MudGrid>
</MudForm>
</DialogContent>
 <DialogActions>
        
        <MudButton Color="Color.Primary" OnClick="Submit">Agregar</MudButton>
    </DialogActions>
</MudDialog>


@code {

     static List<Prestatario> prestatarios = new List<Prestatario>
    {
        new Prestatario{ PrestatarioId= 1,NombreApellido= "Micaela Fumero"},
        new Prestatario{ PrestatarioId= 2,NombreApellido= "Ariel Romero"},
        new Prestatario{ PrestatarioId= 3,NombreApellido= "Marcelo Dip"},
       
    };

    private bool isOpen = false;
    private List<Curso> cursos;
    private List<Inventario> inventarios;
    private List<Prestamo> prestamos;
    private Inventario selectedInventarios;
    private Curso selectedCursos;
    private Prestamo newPrestamo = new Prestamo();
    protected override async Task OnInitializedAsync()
    {
        await CargarInventarios();
        await CargarCursos();
    }

    private async Task CargarInventarios()
    {
        var respuesta = await http.Get<List<Inventario>>("api/InventarioController");
        if (!respuesta.Error)
        {
            inventarios = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar inventarios: {respuesta.Error}");
        }
    }
     private async void Submit()
    {

        var httpRespuesta = await http.Post<Prestamo>("api/PrestamoController", newPrestamo);
        if (!httpRespuesta.Error)
        {

            isOpen = false;
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
    }



       private async Task CargarCursos()
    {
        var respuesta = await http.Get<List<Curso>>("api/CursoController");
        if (!respuesta.Error)
        {
            cursos = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar inventarios: {respuesta.Error}");
        }
    }

        private async Task CargarPrestamos()
    {
        var respuesta = await http.Get<List<Prestamo>>("api/PrestamoController");
        if (!respuesta.Error)
        {
            prestamos = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar prestamos: {respuesta.Error}");
        }
    }
private string MostrarCurso(Curso curso)
{
    return curso != null
        ? $"{curso.Año} - {curso.Division ?? string.Empty} - {curso.Turno ?? string.Empty}- {curso.Nivel ?? string.Empty}"
        : string.Empty;
}

private string MostrarInventario(Inventario inventario)
{
    if (inventario == null)
        return string.Empty;

    return $"{inventario.Tipo?.TipoMat} - {inventario.Codigo} - {inventario.TituloNombre} - {inventario.AutorMarca}";
}

    
   
    
}
