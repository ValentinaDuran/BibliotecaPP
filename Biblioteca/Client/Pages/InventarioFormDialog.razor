@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Services
@inject IHttpService http
@inject NavigationManager NavManager
@using MudBlazor
@inject ISnackbar SnackbarService
<MudDialog iOpen="isOpen">
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="newInventario.TituloNombre"Label="Título/Nombre" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.TypeSpecimen"  For="@(() => newInventario.TituloNombre)" />
                </MudItem>
                
                <MudItem xs="6">
                    <MudTextField @bind-Value="newInventario.AutorMarca" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Assignment" Label="Autor/marca" For="@(() => newInventario.AutorMarca)" />
                </MudItem>

                
                <MudItem xs="6">
                    <MudTextField @bind-Value="newInventario.Observacion"  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Comment"Label="Observación" />
                </MudItem>

                

                <MudItem xs="6">
   <MudSelect @bind-Value="newInventario.TipoId" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Cases"   Label="Seleccione un tipo">
     <MudSelectItem Value="0">
        Tipo
    </MudSelectItem>
       @if (tipos != null)
    {
        @foreach (var tipo in tipos)
        {
            <MudSelectItem Value="@tipo.TipoId">
                @MostrarTipo(tipo)
            </MudSelectItem>
        }
    }
</MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField T="string" Counter="5" MaxLength="5" Immediate="true" @bind-Value="newInventario.Codigo" Label="Codigo" For="@(() => newInventario.Codigo)" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Agregar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool isOpen = false;
    private Inventario model = new Inventario();
    private List<Inventario> inventarios;
    private List<Tipo> tipos;


    protected override void OnInitialized()
    {

        CargarTipos();
    }


    private void EditarInventario(Inventario inventario)
    {

        isOpen = true;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private Inventario newInventario = new Inventario
    {
        Observacion = "Sin observación"
    };


    private async void Submit()
    {
        

       
        var respuesta = await http.Get<List<Inventario>>("api/InventarioController");
        if (!respuesta.Error)
        {
            inventarios = respuesta.Respuesta;
        }

      
          if (inventarios != null && inventarios.Any(i => string.Equals(i.Codigo, newInventario.Codigo, StringComparison.OrdinalIgnoreCase)))
        {
            SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            SnackbarService.Add("El código ya existe en la tabla.", Severity.Error);
            return;
        }


        if (string.IsNullOrWhiteSpace(newInventario.TituloNombre)
        || string.IsNullOrWhiteSpace(newInventario.AutorMarca)
        || string.IsNullOrWhiteSpace(newInventario.Observacion)
        || string.IsNullOrWhiteSpace(newInventario.Codigo)
        || newInventario.TipoId == 0)
        {
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Por favor, completa todos los campos.", Severity.Error);
        return;
      
        }

        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Material registrado", Severity.Success);
         await Task.Delay(1700);
        var httpRespuesta = await http.Post<Inventario>("api/InventarioController", newInventario);
        if (!httpRespuesta.Error)
        {
            
            MudDialog.Close();
            NavManager.NavigateTo("/inventario-list", forceLoad: true);
        }
        else
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
    }

      private async Task CargarTipos()
    {
        var respuesta = await http.Get<List<Tipo>>("api/TipoController");
        if (!respuesta.Error)
        {
            tipos = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar tipo: {respuesta.Error}");
        }
    }

    void Cancel() => MudDialog.Cancel();

      void OpenDialog()
    {
        isOpen = true;
    }

    
private string MostrarTipo(Tipo tipo)
{
    if (tipo == null)
        return string.Empty;

    return $"{tipo.TipoMat}";
}
}
