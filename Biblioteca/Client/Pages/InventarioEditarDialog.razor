@page "/editar-inventario/{inventarioId:int}"
@using Biblioteca.BD.Data.Entidades
@using MudBlazor
@inject NavigationManager NavManager
@using Biblioteca.Client.Services
@inject IHttpService http
@inject IJSRuntime JSRuntime
@inject ISnackbar SnackbarService

<MudDialog Open="isOpen">
    <DialogContent>
        <MudForm>
        <MudGrid>
         <MudItem xs="6">
        <MudTextField @bind-Value="inventarioSeleccionado.Codigo" Label="Codigo" />
        </MudItem>
        <MudTextField @bind-Value="inventarioSeleccionado.TituloNombre" Label="Título/Nombre" />
         <MudItem xs="6">
        <MudTextField @bind-Value="inventarioSeleccionado.AutorMarca" Label="Autor/Marca" />
        </MudItem>
        <MudTextField @bind-Value="inventarioSeleccionado.Observacion" Label="Observación" />
         <MudItem xs="6">
      <MudSelect T="string" @bind-Value="selectedTipo" Label="Tipo">
    @foreach (var tipo in tipos)
    {
        <MudSelectItem Value="@tipo.TipoMat">@tipo.TipoMat</MudSelectItem>
    }
</MudSelect>
</MudItem>
       
        </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
         <MudButton Color="Color.Primary" OnClick="GuardarCambios">Guardar Cambios</MudButton>
        <MudButton OnClick="Cancelar">Cancelar</MudButton>
    </DialogActions>

</MudDialog>

@code {
    private List<Biblioteca.BD.Data.Entidades.Inventario> inventarios;
    private string selectedTipo;
    private Biblioteca.BD.Data.Entidades.Inventario inventarioSeleccionado = new Biblioteca.BD.Data.Entidades.Inventario();
    private bool isOpen = true;
    [Parameter] public Biblioteca.BD.Data.Entidades.Inventario InventarioSeleccionado { get; set; }
    private Timer dataRefreshTimer;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    // Esta lista de tipos es un ejemplo; asegúrate de que coincida con tu lógica
    static List<Tipo> tipos = new List<Tipo>
    {
        new Tipo{ TipoId= 1,TipoMat= "Libro"},
        new Tipo{ TipoId= 2,TipoMat= "Mapa"},
        new Tipo{ TipoId= 3,TipoMat= "ÚtilGeometria"},
        new Tipo{ TipoId= 4,TipoMat= "Computadora"},
        new Tipo{ TipoId= 5,TipoMat= "Proyector"},
        new Tipo{ TipoId= 6,TipoMat= "Revista"},
        new Tipo{ TipoId= 7,TipoMat= "Ludoteca"},
        new Tipo{ TipoId= 8,TipoMat= "InstrumentoMusical"},
   
    };
    [Parameter] public int InventarioSeleccionadoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
         await ObtenerInventarioPorId(InventarioSeleccionadoId);
          await CargarInventarios(); // Carga los datos inicialmente
    }

 private async Task CargarInventarios()
{
    // Accede a la propiedad inventarios de la clase
    var respuesta = await http.Get<List<Biblioteca.BD.Data.Entidades.Inventario>>("api/InventarioController");
    if (!respuesta.Error)
    {
        inventarios = respuesta.Respuesta;
    }
}

     private async void GuardarCambios()
    {
         inventarioSeleccionado.Tipo = tipos.FirstOrDefault(t => t.TipoMat == selectedTipo);
     if (inventarios.Any(i => string.Equals(i.Codigo, inventarioSeleccionado.Codigo, StringComparison.OrdinalIgnoreCase) && i.InventarioId != InventarioSeleccionadoId))
{
    SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
    SnackbarService.Add("El código ya existe en la tabla.", Severity.Error);
    return;
}
         if (string.IsNullOrWhiteSpace(inventarioSeleccionado.TituloNombre)
            || string.IsNullOrWhiteSpace(inventarioSeleccionado.AutorMarca)
            || string.IsNullOrWhiteSpace(inventarioSeleccionado.Observacion)
            || string.IsNullOrWhiteSpace(inventarioSeleccionado.Codigo)
            || inventarioSeleccionado.TipoId == 0
            
         )
        {
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Por favor, completa todos los campos.", Severity.Error);
        return;
      
        }
       var respuesta = await http.Put($"api/InventarioController/{InventarioSeleccionadoId}", inventarioSeleccionado);
       if (!respuesta.Error)
        {
            MudDialog.Close();
            NavManager.NavigateTo("/inventario-list", forceLoad: true);
        }
        else
        {
            var body = respuesta.HttpResponseMessage;
        }
    }


 



    private async Task ObtenerInventarioPorId(int inventarioId)
{
    var respuesta = await http.Get<Biblioteca.BD.Data.Entidades.Inventario>($"api/InventarioController/{inventarioId}");
    if (respuesta.Error)
    {
       
    }
    else
    {
        inventarioSeleccionado = respuesta.Respuesta;
         selectedTipo = inventarioSeleccionado.Tipo?.TipoMat;
        
    }
}


    private void Cancelar()
    {
        MudDialog.Close();
    }

   
}