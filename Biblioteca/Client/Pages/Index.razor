@page "/"
@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Pages.CPrestamo
@using Biblioteca.Client.Pages.Deudores
@using Biblioteca.Client.Services
@inject IHttpService http
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar SnackbarService
@inject NavigationManager NavManager

<style>

</style>

<NavMenu></NavMenu>
<div class="centered-content ">
    <MudCard MaxWidth="3000px" class="mx-auto my-auto">

        <MudCardContent>
            <div style="display: flex;
    justify-content: center;">
                <MudText Typo="Typo.h3" class="centered-content"> <b>Prestamos</b></MudText>
            </div>
            <div style="margin-bottom: 16px;">
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.TwoTone.Search" Label="Buscar" @bind-Value="@buscarTermino" Variant="Variant.Outlined" />
            </div>

            <MudButton Class="mb-5" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                Agregar Prestamo
            </MudButton>

            <MudTable @ref="@_table" Items="@prestamos" FixedHeader="@fixed_header" RowsPerPage="4" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "600px" : "")" HorizontalScrollbar="false">
                <HeaderContent>
                    <MudTh style="white-space: nowrap;">Prestatario</MudTh>
                    <MudTh style="white-space: nowrap;">Material</MudTh>
                    <MudTh style="white-space: nowrap;">Curso</MudTh>
                    <MudTh style="white-space: nowrap;">Fecha de entrega</MudTh>
                    <MudTh style="white-space: nowrap;">Hora de entrega</MudTh>
                    <MudTh>Fecha de devolucion</MudTh>
                    <MudTh>Hora de devolucion</MudTh>
                    <MudTh>Observacion</MudTh>
                    <MudTh>Acciones</MudTh>
                     <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (string.IsNullOrWhiteSpace(buscarTermino) || MatchesSearchTerm(context))
                    {
                        <MudTd DataLabel="Prestatario" class="ampliar-columna">@context.Prestatario.NombreApellido</MudTd>
                        <MudTd DataLabel="material" Style="font-size:13px">
                            <b>Codigo:</b>@context.Inventario.Codigo
                            <b>Material:</b> @context.Inventario.TituloNombre
                            <b>Autor/Marca:</b> @context.Inventario.AutorMarca

                        </MudTd>
                        <MudTd DataLabel="Curso" Style="font-size:13px">
                            <b>Año:</b>
                            @context.Curso.Año
                            <b>Division:</b>
                            @context.Curso.Division <br />
                            <b>Nivel:</b> @context.Curso.Nivel
                            <b>Turno:</b> @context.Curso.Turno

                        </MudTd>

                        <MudTd DataLabel="Fecha de entrega">@context.FechaEntrega.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de entrega">@context.HoraEntrega.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Fecha de Devolución">@context.FechaDevolucion.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de Devolución">@context.HoraDevolucion.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Observacion">@context.Observacion</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Borrar" @onclick="() => MostrarDialogBorrar(context)" />
                        </MudTd>   
                        
                        <MudTd>

                            <MudIconButton Icon="@Icons.Material.Filled.Report" Title="Deudor" @onclick="() => EditarDeudor(context)" />
                        </MudTd>
                    }
                </RowTemplate>

                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4 d-flex justify-content-center" />
                </PagerContent>
            </MudTable>

        </MudCardContent>
    </MudCard>
</div>

@code {
    private MudTable<Prestamo> _table;
    List<Prestamo> prestamos;
    bool fixed_header = true;
    bool fixed_footer = true;
    string buscarTermino = "";


    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }


        private async Task PasarDeudor(Prestamo prestamo)
    {

        var respuestaInventario = await http.Put<Prestamo>($"api/PrestamoController/deudor/{prestamo.PrestamoId}", null);
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Deudor registrado", Severity.Info);
        await Task.Delay(1700);
        if (respuestaInventario.Error)
        {
            var body = "Error";
        }
        await Leer();
    }

        private async Task MostrarDialogDeudor(Prestamo prestamo)
    {
        var parameters = new DialogParameters();
        parameters.Add("Prestamo", prestamo);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ConfirmDeudor>("Deudor", parameters, options).Result;

        if (result.Cancelled)
        {
            // Acción cancelada
        }
        else if (result.Data is bool confirmado && confirmado)
        {
            await PasarDeudor(prestamo);
        }
    }

       void EditarDeudor(Prestamo prestamo)
    {
        var parameters = new DialogParameters();
        parameters.Add("DeudorSeleccionadoId", prestamo.PrestamoId);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<DeudorEditarDialog>("Editar deudor", parameters, options);
    }


    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await Leer();
    }
    bool isOpen = false;
    void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<PrestamoFormDialog>("Agregar Prestamo", options);
    }


    private async Task Leer()
    {
        var respuesta = await http.Get<List<Prestamo>>("api/PrestamoController");
        var respuestaReservas = await http.Get<List<Reserva>>("api/ReservaController");
        if (!respuesta.Error)
        {
            prestamos = respuesta.Respuesta;

            if (!respuestaReservas.Error && respuestaReservas.Respuesta.Any(r => r.Pasar))
            {
                var reservasParaAgregar = respuestaReservas.Respuesta
                    .Where(r => r.Pasar)
                    .Select(r => new Prestamo
                        {
                    // Mapear las propiedades necesarias de Reserva a Prestamo
                            Prestatario = r.Prestatario,
                            Inventario = r.Inventario,
                            Curso = r.Curso,
                            FechaEntrega = r.FechaEntrega,
                            HoraEntrega = r.HoraEntrega,
                            FechaDevolucion = r.FechaDevolucion,
                            HoraDevolucion = r.HoraDevolucion,
                    // ... mapear otras propiedades según sea necesario
                        });

                prestamos.AddRange(reservasParaAgregar);
            }
        }
    }

    bool MatchesSearchTerm(Prestamo prestamo)
    {
        if (string.IsNullOrWhiteSpace(buscarTermino))
        {
            return true;
        }

        return prestamo.Inventario.TituloNombre.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.AutorMarca.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.Tipo.TipoMat.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.Codigo.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Año.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Division.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Nivel.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Turno.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase);
    }

    private async Task Borrar(Prestamo prestamoborrar)
    {
        var respuestaPrestamo = await http.Delete($"api/PrestamoController/{prestamoborrar.PrestamoId}");

        if (!respuestaPrestamo.Error)
        {
            SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            SnackbarService.Add("Prestamo Eliminado", Severity.Success);
            var respuestaInventario = await http.Put<Inventario>($"api/InventarioController/activar/{prestamoborrar.Inventario.InventarioId}", null);

            if (respuestaInventario.Error)
            {
                var errorInventario = respuestaInventario.Error;
            }

            await Leer();
        }
        else
        {
            var errorPrestamo = respuestaPrestamo.Error;
        }
    }

    private async Task MostrarDialogBorrar(Prestamo prestamo)
    {
        var parameters = new DialogParameters();
        parameters.Add("Prestamo", prestamo);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ConfirmPrestamo>("Confirmar Borrado", parameters, options).Result;

        if (result.Cancelled)
        {
            // Acción cancelada
        }
        else if (result.Data is bool confirmado && confirmado)
        {
            await Borrar(prestamo);
        }
    }
    private async Task EliminarReservasConvertidas()// el que hice para que se elimine cuando es marcado como devuelto
    {
        try
        {
            var respuestaReservas = await http.Get<List<Reserva>>("api/ReservaController");

            if (!respuestaReservas.Error && respuestaReservas.Respuesta.Any(r => r.Pasar))
            {
                var reservasParaEliminar = respuestaReservas.Respuesta.Where(r => r.Pasar).ToList();

                foreach (var reserva in reservasParaEliminar)
                {
                    // Lógica para eliminar la reserva utilizando un endpoint DELETE específico
                    var response = await http.Delete($"api/ReservaController/{reserva.ReservaId}");
                    if (response.Error)
                    {
                        // Manejo de errores si la eliminación falla
                        // Puedes agregar logs o mensajes de error según tu necesidad
                    }
                }

            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones
        }
    }

    // private async Task EliminarPrestamoYReservas(Biblioteca.BD.Data.Entidades.Prestamo prestamo)
    // {
    //     try
    //     {
    //         // Lógica para eliminar las reservas asociadas al préstamo
    //         var reservasAEliminar = await ObtenerReservasParaEliminar(prestamo);
    //         foreach (var reserva in reservasAEliminar)
    //         {
    //             var response = await http.Delete($"api/ReservaController/{reserva.ReservaId}");
    //             if (response.Error)
    //             {
    //                 // Manejo de errores si la eliminación falla
    //                 // Puedes agregar logs o mensajes de error según tu necesidad
    //             }
    //         }

    //         // Lógica para eliminar el préstamo
    //         var responsePrestamo = await http.Delete($"api/PrestamoController/{prestamo.PrestamoId}");
    //         if (responsePrestamo.Error)
    //         {
    //             // Manejo de errores si la eliminación del préstamo falla
    //             // Puedes agregar logs o mensajes de error según tu necesidad
    //         }

    //         // Snackbar para mostrar que se borró el préstamo y redireccionar a "/"
    //         SnackbarService.Add("Prestamo y Reservas eliminados", Severity.Success);
    //         NavigationManager.NavigateTo("/");
    //     }
    //     catch (Exception ex)
    //     {
    //         // Manejo de excepciones
    //     }
    // }

    // private async Task<List<Biblioteca.BD.Data.Entidades.Reserva>> ObtenerReservasParaEliminar(Biblioteca.BD.Data.Entidades.Prestamo prestamo)
    // {
    //     var respuestaReservas = await http.Get<List<Biblioteca.BD.Data.Entidades.Reserva>>("api/ReservaController");

    //     if (!respuestaReservas.Error)
    //     {
    //         return respuestaReservas.Respuesta
    //             .Where(r => r.Pasar && r.PrestamoId == prestamo.PrestamoId)
    //             .ToList();
    //     }
    //     return new List<Biblioteca.BD.Data.Entidades.Reserva>();
    // }

}
