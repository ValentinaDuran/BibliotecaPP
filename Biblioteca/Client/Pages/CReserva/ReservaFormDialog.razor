
@page "/nurevareserva"
@inject ISnackbar SnackbarService
@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Services
@inject IHttpService http
@inject NavigationManager NavManager

<MudDialog iOpen="isOpen">
    <DialogContent>
        <MudForm>
            <MudGrid>
   <MudItem xs="12">
<MudSelect T="int" @bind-Value="newReserva.PrestatarioId" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" For="@(() => newReserva.PrestatarioId)">
     <MudSelectItem Value="0">
        Prestatario
    </MudSelectItem>
    @if (prestatarios != null)
    {
                        @foreach (var prestatario in prestatarios)
                        {
                            <MudSelectItem Value="@prestatario.PrestatarioId">
                                @MostrarPrestatario(prestatario)
                            </MudSelectItem>
                        }
    }
                    </MudSelect>    
                </MudItem>


    <MudItem xs="12"> 
<MudSelect @bind-Value="newReserva.InventarioId" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ViewCompact" Label="Seleccionar Material" Placeholder="Seleccione un Inventario">
     <MudSelectItem Value="0">
        Material
    </MudSelectItem>
    @if (inventarios != null)
    {
        @foreach (var inventario in inventarios)
        {
            <MudSelectItem Value="@inventario.InventarioId">
                @MostrarInventario(inventario)
            </MudSelectItem>
        }
    }
</MudSelect>

        </MudItem>

                <MudItem xs="12">
           

   <MudSelect @bind-Value="newReserva.CursoId" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Cases"   Label="Seleccione un Curso">
     <MudSelectItem Value="0">
        Curso
    </MudSelectItem>
       @if (cursos != null)
    {
        @foreach (var curso in cursos)
        {
            <MudSelectItem Value="@curso.CursoId">
                @MostrarCurso(curso)
            </MudSelectItem>
        }
    }
</MudSelect>

        </MudItem>
        <MudItem xs="6" >      
           <MudTextField T="DateTime" @bind-Value="@newReserva.FechaEntrega" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DateRange" Format="yyyy-MM-dd" Label="Fecha de entrega"  InputType="InputType.Date"/>
           </MudItem>
        <MudItem xs="6" >      
<MudTextField T="TimeSpan"  @bind-Value="@newReserva.HoraEntrega" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.TwoTone.AccessTime"  Label="Hora de entrega" InputType="InputType.Time"/>           </MudItem>
        <MudItem xs="6" >      
<MudTextField T="DateTime" @bind-Value="@newReserva.FechaDevolucion" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DateRange" Format="yyyy-MM-dd" Label="Fecha de devolucion"  InputType="InputType.Date"/>           </MudItem>
        <MudItem xs="6" >      
<MudTextField T="TimeSpan" @bind-Value="@newReserva.HoraDevolucion" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.TwoTone.AccessTime"  Label="Hora de devolucion" InputType="InputType.Time"/>           </MudItem>
        <MudItem xs= "12">
        <MudTextField py-8  Label="Observacion" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EditNote" @bind-Value="newReserva.Observacion" />
        </MudItem>



</MudGrid>
</MudForm>
</DialogContent>
 <DialogActions>
        
        <MudButton Color="Color.Primary" OnClick="Submit">Agregar</MudButton>
         <MudButton OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private List<Prestatario> prestatarios;
    private bool isOpen = false;
    private List<Curso> cursos;
    private List<Inventario> inventarios;
    private List<Prestamo> prestamos;
    private Reserva newReserva = new Reserva
    {
        Observacion = "Sin observación"
    };
    protected override async Task OnInitializedAsync()
    {
        await CargarInventarios();
        await CargarCursos();
        await CargarPrestatario();
    }

    private async Task CargarInventarios()
    {
        var respuesta = await http.Get<List<Inventario>>("api/InventarioController");
        if (!respuesta.Error)
        {
            inventarios = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar inventarios: {respuesta.Error}");
        }
    }
     private async void Submit()
    {
         if (newReserva.InventarioId == null || newReserva.InventarioId == 0
        || newReserva.PrestatarioId == null || newReserva.PrestatarioId == 0
        || newReserva.CursoId == null || newReserva.CursoId == 0
        || newReserva.FechaEntrega == default(DateTime)
        || newReserva.FechaDevolucion == default(DateTime)
         || newReserva.HoraEntrega == default(TimeSpan)
         || newReserva.HoraDevolucion == default(TimeSpan)
         )
        {
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Por favor, completa todos los campos.", Severity.Error);
        return;
      
        }
         var desactivarRespuesta = await http.Delete($"api/InventarioController/{newReserva.InventarioId}");
        if (desactivarRespuesta.Error)
        {
            // Manejar el error si la desactivación falla
        }
         SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Reserva registrada", Severity.Success);
        // Cambiar el valor de Pasar
        await Task.Delay(1700);

        var httpRespuesta = await http.Post<Reserva>("api/ReservaController", newReserva);
        if (!httpRespuesta.Error)
        {

            isOpen = false;
            NavManager.NavigateTo("/reserva-list", forceLoad: true);
        }
        else
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
    }

     void Cancel() => MudDialog.Cancel();

       private async Task CargarCursos()
    {
        var respuesta = await http.Get<List<Curso>>("api/CursoController");
        if (!respuesta.Error)
        {
            cursos = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar inventarios: {respuesta.Error}");
        }
    }

        private async Task CargarPrestatario()
    {
        var respuesta = await http.Get<List<Prestatario>>("api/PrestatariosController");
        if (!respuesta.Error)
        {
            prestatarios = respuesta.Respuesta;
        }
        else
        {
            Console.WriteLine($"Error al cargar prestamos: {respuesta.Error}");
        }
    }
private string MostrarCurso(Curso curso)
{
    return curso != null
        ? $"{curso.Año} - {curso.Division ?? string.Empty} - {curso.Turno ?? string.Empty}- {curso.Nivel ?? string.Empty}"
        : string.Empty;
}

private string MostrarInventario(Inventario inventario)
{
    if (inventario == null)
        return string.Empty;

    return $"{inventario.Tipo?.TipoMat} - {inventario.Codigo} - {inventario.TituloNombre} - {inventario.AutorMarca}";
}


private string MostrarPrestatario(Prestatario prestatario)
{
    if (prestatario == null)
        return string.Empty;

    return $"{prestatario.NombreApellido}";
}


    
   
    
}
