@page "/reserva-list"

@using Biblioteca.Client.Services
@using Biblioteca.BD.Data.Entidades
@inject IHttpService http
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar SnackbarService
@inject NavigationManager NavManager
<NavMenu></NavMenu>
<div class="centered-content ">
    <MudCard MaxWidth="2500px" class="mx-auto my-auto">

        <MudCardContent>
            <div style="display: flex;
    justify-content: center;">
                <MudText Typo="Typo.h3" class="centered-content"> <b>Reservas</b></MudText>
            </div>
            <div style="margin-bottom: 16px;">
                <MudTextField T="string" Immediate="true" Label="Buscar" @bind-Value="@buscarTermino" Variant="Variant.Outlined" />
            </div>

            <MudButton Class="mb-5" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                Agregar Reserva
            </MudButton>

            <MudTable  Items="@reservas" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "600px" : "")" HorizontalScrollbar="false">
                <HeaderContent>
                    <MudTh style="white-space: nowrap;">Prestatario</MudTh>
                    <MudTh style="white-space: nowrap;">Material</MudTh>
                    <MudTh style="white-space: nowrap;">Curso</MudTh>
                    <MudTh style="white-space: nowrap;">Fecha de Reserva</MudTh>
                    <MudTh style="white-space: nowrap;">Hora de Reserva</MudTh>
                    <MudTh>Fecha de devolucion</MudTh>
                    <MudTh>Hora de devolucion</MudTh>
                    <MudTh>Observacion</MudTh>
                    <MudTh>Acciones</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (string.IsNullOrWhiteSpace(buscarTermino) || MatchesSearchTerm(context))
                    {
                        <MudTd DataLabel="Prestatario" class="ampliar-columna">@context.Prestatario.NombreApellido</MudTd>
                        <MudTd DataLabel="material" Style="font-size:13px">
                            <b>Codigo:</b>@context.Inventario.Codigo
                            <b>Material:</b> @context.Inventario.TituloNombre
                            <b>Autor/Marca:</b> @context.Inventario.AutorMarca

                        </MudTd>
                        <MudTd DataLabel="Curso" Style="font-size:13px">
                            <b>Año:</b>
                            @context.Curso.Año
                            <b>Division:</b>
                            @context.Curso.Division <br />
                            <b>Nivel:</b> @context.Curso.Nivel
                            <b>Turno:</b> @context.Curso.Turno

                        </MudTd>

                        <MudTd DataLabel="Fecha de entrega">@context.FechaEntrega.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de entrega">@context.HoraEntrega.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Fecha de Devolución">@context.FechaDevolucion.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de Devolución">@context.HoraDevolucion.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Observacion">@context.Observacion</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.DoubleArrow" Title="Prestar" @onclick="() => MostrarDialogReserva(context)" />
                        </MudTd>
                        <MudTd>

                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Borrar" @onclick="() => MostrarDialogBorrar(context)" />
                        </MudTd>

                    }



                </RowTemplate>
            </MudTable>

        </MudCardContent>
    </MudCard>

</div>

@code {
    private MudTable<Reserva> _table;
    List<Reserva> reservas;
    bool fixed_header = true;
    bool fixed_footer = true;

    bool isOpen = false;
    bool filter = true;
    string buscarTermino = "";

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
    void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ReservaFormDialog>("Agregar Reserva", options);

    }

    private async Task MarcarPrestamo(Reserva context)
    {
        // Cambiar el valor de Pasar
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Prestamo registrado", Severity.Success);
        // Cambiar el valor de Pasar
        context.Pasar = true;
        await Task.Delay(1700);
        // Realizar la solicitud PUT para actualizar el valor en el servidor
        var respuesta = await http.Put($"api/ReservaController/{context.ReservaId}", context);
        NavManager.NavigateTo("/reserva-list", forceLoad: true);

    }

    private async Task MostrarDialogReserva(Reserva reserva)
    {
        var parameters = new DialogParameters();
        parameters.Add("Reserva", reserva);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ConfirmReserva>("Advertencia", parameters, options).Result;

        if (result.Cancelled)
        {
            // Acción cancelada
        }
        else if (result.Data is bool confirmado && confirmado)
        {
            await MarcarPrestamo(reserva);
        }
    }



    private async Task Borrar(Reserva reservaborrar)
    {
        var respuesta = await http.Delete($"api/ReservaController/{reservaborrar.ReservaId}");
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Reserva Eliminada", Severity.Success);
        if (respuesta.Error)
        {
            var body = "Error";
        }
        await Leer();
    }

    private async Task MostrarDialogBorrar(Reserva reserva)
    {
        var parameters = new DialogParameters();
        parameters.Add("Reserva", reserva);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ConfirmReserva>("Advertencia", parameters, options).Result;

        if (result.Cancelled)
        {
            // Acción cancelada
        }
        else if (result.Data is bool confirmado && confirmado)
        {
            await Borrar(reserva);
        }
    }



    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var respuesta = await http.Get<List<Reserva>>("api/ReservaController");
        if (!respuesta.Error)
        {
            reservas = respuesta.Respuesta.Where(r => !r.Pasar).ToList();
        }
    }

    bool MatchesSearchTerm(Reserva reserva)
    {
        if (string.IsNullOrWhiteSpace(buscarTermino))
        {
            return true;
        }

        return reserva.Inventario.TituloNombre.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Inventario.AutorMarca.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Inventario.Tipo.TipoMat.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Inventario.Codigo.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Curso.Año.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Curso.Division.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Curso.Nivel.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           reserva.Curso.Turno.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase);
    }
}
