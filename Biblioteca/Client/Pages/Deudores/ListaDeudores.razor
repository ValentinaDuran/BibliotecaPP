@page "/lista-deudor"
@using Biblioteca.BD.Data.Entidades
@using Biblioteca.Client.Pages.CPrestamo
@using Biblioteca.Client.Services
@inject IHttpService http
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar SnackbarService
@inject NavigationManager NavManager

<style>

</style>

<NavMenu></NavMenu>
<div class="centered-content " >
    <MudCard MaxWidth="2500px" class="mx-auto my-auto">
       
        <MudCardContent>
            <div style="display: flex;
    justify-content: center;">
                <MudText  Typo="Typo.h3" class="centered-content"> <b>Deudores</b></MudText>
            </div>
             <div style="margin-bottom: 16px;">
                <MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.TwoTone.Search"  Label="Buscar" @bind-Value="@buscarTermino" Variant="Variant.Outlined" />
            </div>
            
    

                <MudTable @ref="@_table" Items="@prestamos" FixedHeader="@fixed_header" RowsPerPage="4" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ? "600px" : "")" HorizontalScrollbar="false">
                    <HeaderContent>
                        <MudTh style="white-space: nowrap;">Prestatario</MudTh>
                        <MudTh style="white-space: nowrap;">Material</MudTh>
                        <MudTh style="white-space: nowrap;">Curso</MudTh>
                        <MudTh style="white-space: nowrap;">Fecha de entrega</MudTh>
                        <MudTh style="white-space: nowrap;">Hora de entrega</MudTh>
                        <MudTh>Fecha de devolucion</MudTh>
                        <MudTh>Hora de devolucion</MudTh>
                           <MudTh>Observacion</MudTh>
                            <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                          @if (string.IsNullOrWhiteSpace(buscarTermino) || MatchesSearchTerm(context))
                        {
                        <MudTd DataLabel="Prestatario" class="ampliar-columna">@context.Prestatario.NombreApellido</MudTd>
                        <MudTd DataLabel="material" Style="font-size:13px">
                            <b>Codigo:</b>@context.Inventario.Codigo
                            <b>Material:</b> @context.Inventario.TituloNombre 
                            <b>Autor/Marca:</b> @context.Inventario.AutorMarca

                        </MudTd>
                        <MudTd DataLabel="Curso" Style="font-size:13px">
                            <b>Año:</b>
                            @context.Curso.Año
                            <b>Division:</b>
                            @context.Curso.Division <br />
                            <b>Nivel:</b> @context.Curso.Nivel 
                            <b>Turno:</b> @context.Curso.Turno

                        </MudTd>

                        <MudTd DataLabel="Fecha de entrega">@context.FechaEntrega.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de entrega">@context.HoraEntrega.ToString(@"hh\:mm")</MudTd>                       
                        <MudTd DataLabel="Fecha de Devolución">@context.FechaDevolucion.ToString("d")</MudTd>
                        <MudTd DataLabel="Hora de Devolución">@context.HoraDevolucion.ToString(@"hh\:mm")</MudTd>
                        <MudTd DataLabel="Observacion">@context.Observacion</MudTd>
                       
                        <MudTd>
  <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Borrar" @onclick="() => MostrarDialogBorrar(context)" />                        </MudTd>
                        }
                    </RowTemplate>

                                        <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"Class="pa-4 d-flex justify-content-center"/>
    </PagerContent>
               </MudTable>
            
        </MudCardContent>
    </MudCard>
</div>
@code {
    private MudTable<Prestamo> _table;
     List<Prestamo> prestamos;
     bool fixed_header = true;
     bool fixed_footer = true;
     string buscarTermino = "";


      private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

        protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await Leer();
    }
    bool isOpen = false;
       void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<PrestamoFormDialog>("Agregar Prestamo", options);
    }


   private async Task Leer()
{
    var respuesta = await http.Get<List<Prestamo>>("api/PrestamoController/deudor-true");
    if (!respuesta.Error)
    {
        prestamos = respuesta.Respuesta;
    }
}

    bool MatchesSearchTerm(Prestamo prestamo)
    {
        if (string.IsNullOrWhiteSpace(buscarTermino))
        {
            return true;
        }

        return prestamo.Inventario.TituloNombre.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.AutorMarca.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.Tipo.TipoMat.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Inventario.Codigo.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Prestatario.NombreApellido.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Año.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Division.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Nivel.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase) ||
           prestamo.Curso.Turno.Contains(buscarTermino, StringComparison.OrdinalIgnoreCase);
    }

   private async Task Borrar(Prestamo prestamoborrar)
{
    var respuestaPrestamo = await http.Delete($"api/PrestamoController/{prestamoborrar.PrestamoId}");

    if (!respuestaPrestamo.Error)
    {
        SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        SnackbarService.Add("Prestamo Eliminado", Severity.Success);
        var respuestaInventario = await http.Put<Inventario>($"api/InventarioController/activar/{prestamoborrar.Inventario.InventarioId}", null);

        if (respuestaInventario.Error)
        {
            var errorInventario = respuestaInventario.Error;
        }

        await Leer();
    }
    else
    {
        var errorPrestamo = respuestaPrestamo.Error;
    }
}

    


    private async Task MostrarDialogBorrar(Prestamo prestamo)
    {
        var parameters = new DialogParameters();
        parameters.Add("Prestamo", prestamo);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<ConfirmPrestamo>("Confirmar Borrado", parameters, options).Result;

        if (result.Cancelled)
        {
            // Acción cancelada
        }
        else if (result.Data is bool confirmado && confirmado)
        {
            await Borrar(prestamo);
        }
    }
  


}
